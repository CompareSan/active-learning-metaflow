stages:
  - build
  - test

build-job:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --build-arg TOKEN_NAME=gitlab-ci-token --build-arg ACCESS_TOKEN=${CI_JOB_TOKEN} -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -f docker/dev.dockerfile .
    - docker image ls
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  only:
    changes:
      - requirements.txt
      - requirements-dev.txt
      - docker/dev.dockerfile

format_check:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker
  script:
    - make format_check

static:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker
  script:
    - make static

test:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker
  script:
    - make test

coverage:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker
  script:
    - make test_coverage

security:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - docker
  artifacts:
    paths:
    - bandit-report.json
    when: always
  script:
    - >
      bandit -r -f json . > bandit-report.json;
      if [ "$(jq '.results|length' bandit-report.json)" = 0 ]; then
        echo "No vulnerability found."
      else
        echo "Vulnerabilities found:"
        jq .results bandit-report.json
        exit 1
      fi
